<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freenekobox.github.io/news/article-77355.htm" />
    <meta charset="utf-8">
    <title>JVM程序计数器与虚拟机栈</title>
        <meta name="description" content="jvm内存结构,如下图： 、 java虚拟机(jvm)在java程序运行的时候,会将它所管理的内存划分为若干个不同的数据区域,这些数据区域有的随着jvm的启动而创建,有的随着用户线程的启动和结束而建立" />
        <link rel="icon" href="/assets/website/img/freenekobox/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free Nekobox官方节点站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freenekobox.github.io/news/article-77355.htm" />
    <meta property="og:site_name" content="Free Nekobox官方节点站" />
    <meta property="og:title" content="JVM程序计数器与虚拟机栈" />
    <meta property="og:image" content="https://freenekobox.github.io/uploads/20240726/084747a91b09a06849e761f3a4a71658.webp" />
        <meta property="og:release_date" content="2025-03-20T09:59:13" />
    <meta property="og:updated_time" content="2025-03-20T09:59:13" />
        <meta property="og:description" content="jvm内存结构,如下图： 、 java虚拟机(jvm)在java程序运行的时候,会将它所管理的内存划分为若干个不同的数据区域,这些数据区域有的随着jvm的启动而创建,有的随着用户线程的启动和结束而建立" />
        
    <meta content="width=device-width, initial-scale=1.0" name="viewport">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="JVM程序计数器与虚拟机栈">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,700,700i|Raleway:300,400,500,700,800|Montserrat:300,400,700" rel="stylesheet">
    <!-- Bootstrap CSS File -->
    <link href="/assets/website/js/frontend/freenekobox/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <!-- Libraries CSS Files -->
    <link href="/assets/website/js/frontend/freenekobox/font-awesome/css/font-awesome.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/animate/animate.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/ionicons/css/ionicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/magnific-popup/magnific-popup.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/ionicons/css/ionicons.min.css" rel="stylesheet">
    <!-- Main Stylesheet File -->
    <link href="/assets/website/css/freenekobox/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0MMNV1S9L6"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0MMNV1S9L6');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="body" data-page="detail">
        <header id="header">
        <div class="container">
            <div id="logo" class="pull-left">
                                <a href="/" id="body" class="scrollto">Free Nekobox</a>
                                <!-- <a href="#body"><img src="/assets/website/img/freenekobox/logo.png" alt="" title="" /></a>-->
            </div>
            <nav id="nav-menu-container">
                <ul class="nav-menu">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/client.htm">客户端</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                    </ul>
            </nav><!-- #nav-menu-container -->
        </div>
    </header><!-- #header -->
    <!--==========================
    Page Banner Section
  ============================-->
    <section id="innerBanner">
        <div class="inner-content">
            <h1><span>JVM程序计数器与虚拟机栈</span></h1>
            <div class="nav-box">
                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
            </div>
        </div>
    </section><!-- #Page Banner -->
    <main id="main">
        <section id="about" class="wow fadeInUp">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="NekoBoxNode官网节点站" data-url="https://nekoboxnode.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <p>jvm内存结构,如下图：</p> <p><img fetchpriority="high" decoding="async" alt="" height="369" src="http://img.555519.xyz/uploads3/20220819/b3ceec92a88ce08706fa081863fc7fee.jpg">、</p> <p>java虚拟机(jvm)在java程序运行的时候,会将它所管理的内存划分为若干个不同的数据区域,这些数据区域有的随着jvm的启动而创建,有的随着用户线程的启动和结束而建立和销毁。</p> <h3>一、程序计数器(Program counter register)</h3> <p>根据上面的内存结构图,我们来了解以下什么是程序计数器</p> <p><strong>1、什么是程序计数器(program counter register) ？</strong></p> <p>程序计数器是用来记住下一条jvm指令的执行地址和行号的。</p> <p>当执行一条指令时,首先需要根据PC中存放的指令地址,将指令由内存中读取到指令寄存器中,此过程称之为"取指令"。</p> <p>同时,PC中的地址给出下一条指令的地址。此后,经过分析指令,执行指令,完成第一条指令的执行,而后根据PC取出第二条指令的地址,如此循环,执行每一条指令。</p> <p><strong>2、程序计数器的特点</strong></p> <p>1）、线程私有,即每个线程都有自己的程序计数器</p> <p>cpu会为每个线程分配时间片,当当前线程的时间片使用完后,cpu就会去执行另一个线程中的代码。</p> <p>程序计数器是每个线程所私有的,当另一个线程的时间片用完,又返回来执行当前线程的代码时,通过程序计数器可以知道应该执行哪一句指令。</p> <p>2）、不会存在内存溢出,它是唯一的一个在java虚拟机规范中没有任何OutOfMemoryError的区域。</p> <p>3）、线程隔离性,每个线程工作时都有属于自己的独立计数器</p> <p>4）、程序计数器占用内存很小,在进行JVM内存计算时,可以忽略不计。</p> <p>5）、执行native本地方法时,程序计数器的值为空(Undefined)</p> <p>因为native方法是java通过JNI直接调用本地C/C++库,可以近似的认为native方法相当于C/C++暴露给java的一个接口,java通过调用这个接口从而调用到C/C++方法,由于该方法是通过C/C++而不是java进行实现的,那么自然无法产生相应的字节码,并且C/C++执行时的内存分配是由自己语言决定的,而不是由JVM决定的。</p> <p><img decoding="async" alt="" height="328" src="http://img.555519.xyz/uploads3/20220819/0155da8ff189c337c10305a0b02992e8.jpg"></p> <p><strong>3、jvm的指令也称之为二进制字节码指令</strong></p> <p>java虚拟机的指令由一个字节长度的,代表某种特定操作含义的操作码(opcode)以及跟随其后的零至多个代表此操作所需参数的操作数(operand)所构成。</p> <p>虚拟机中许多指令并不包含操作数,只有一个操作码。格式如下：</p> <pre><code>opcode (1 byte)  operand1 (optional)  operand2 (optional)</code></pre> <p>在当前执行方法的栈帧里,一条指令可以将值在操作栈中入栈或出栈,可以在本地变量数组中悄悄的加载或者存储值。</p> <p>下面我们来看一段java代码,如下：</p> <pre><code>import java.io.PrintStream;  public class ProcessCounter {     public static void main(String[] args) {         PrintStream out=System.out;         out.println(1);         out.println(2);         out.println(3);         out.println(4);         out.println(5);     } }</code></pre> <p>比如,该java类在F盘test文件夹下,我们通过javac ProcessCounter.java编译生成ProcessCounter.class二进制文件</p> <p><img decoding="async" alt="" height="302" src="http://img.555519.xyz/uploads3/20220819/fca40b29b16c891b52cc319aa05e732d.jpg"></p> <p>cmd窗口操作,进入F盘下的test文件夹,进入ProcessCounter.class类所在文件目录</p> <p>执行如下命令：</p> <pre><code>javap -c ProcessCounter.class</code></pre> <p>得到如下结果</p> <p><img loading="lazy" decoding="async" alt="" height="622" src="http://img.555519.xyz/uploads3/20220819/fcd495f195a1203170d636e924eb0bab.jpg"></p> <p>上面是二进制字节码,二进制字节码主要先交给解释器来进行解释成机器码,这样CPU才能看懂。</p> <p>那么问题来了,解释器一次解释一句二进制字节码指令,那么解释器如何知道下一条二进制字节码指令是什么呢？</p> <p>这时就需要程序计数器了,程序计数器记录着下一条指令的地址,例如此时解释器执行第一条字节码指令,那么解释器中的地址码是0,而程序计数器中记录下一条指令的地址就是3,紧接着就是4,5,6.....</p> <p>注：说白了,程序计数器就是记录下一条JVM指令的地址。</p> <p>例如：现有线程1和线程2,假设线程1需要执行的代码量比较大,我们不可能让线程1全部执行完,再执行线程2中的代码,每个线程的执行都会有一个时间片,线程1的时间片用完,就会执行线程2,线程2执行完,接着反过来执行线程1,那么如何知道线程1上1次执行到哪里了,就需要通过程序计数器的记录告知下一条JVM指令的地址,然后根据该地址继续执行后续代码。</p> <p><strong>二、虚拟机栈(java virtual machine stacks)</strong></p> <p><strong>1、相关概念</strong></p> <p>栈：就是线程运行所需要的内存空间</p> <p>栈帧：每个栈由多个栈帧组成,每个栈帧对应每次调用方法时所占用的内存。</p> <p>每个线程只能有一个活动栈帧,对应着当前正在执行的方法。</p> <p>如下：</p> <p><img loading="lazy" decoding="async" alt="" height="309" src="http://img.555519.xyz/uploads3/20220819/570c56663806be1a4238113f760dcb6b.jpg"></p> <p>栈就好比是子弹夹,栈帧就好比是子弹,我们可以将子弹一颗一颗放进子弹夹,遵循：先进后出,后进先出。</p> <p>如上面：我们依次将栈帧1、栈帧2、栈帧3放入到栈中,出的时候顺序是栈帧3、栈帧2、栈帧1.</p> <p>一个栈帧对应一次方法的调用,线程是由一个一个方法组成,每个方法运行时需要的内存就是栈帧。</p> <p>方法运行时需要内存做什么？方法里面的参数、局部变量、返回地址都是需要占用内存存储的。</p> <p><strong>2、栈和栈帧的示例演练</strong></p> <pre><code>package com.wzy.test; /**  * 栈和栈帧演练  * */ public class StackTest {     public static void main(String[] args) {         method1();     }      public static void method1(){         method2(1,2);     }      public static int method2(int a,int b){         int c=a+b;         return c;     } }</code></pre> <p>我们在打上三个断点,进入debug调试一下,如下图：</p> <p><img loading="lazy" decoding="async" alt="" height="399" src="http://img.555519.xyz/uploads3/20220819/32c77de096039cbcfa07098647ad3ac0.jpg"></p> <p>逐步调试如下：</p> <p><img loading="lazy" decoding="async" alt="" height="323" src="http://img.555519.xyz/uploads3/20220819/887adb508136d824d84556eaae96cbad.jpg"></p> <p>Frames下显示三个栈帧,分别为main、method1、method2。这三个方法的执行符合栈的特点,先执行的先入栈。</p> <p><strong>3、栈问题引入分析？</strong></p> <p><strong>问题1、垃圾回收是否需要栈内存？</strong></p> <p>不需要,因为虚拟机栈是由一个个栈帧组成的, 在方法执行完毕后，对应的栈帧就会被弹出栈。所以不需要垃圾回收机制去回收栈内存。</p> <p><strong>问题2、栈内存分配得越大越好吗？</strong></p> <p>不是,因为物理内存都是固定的,如果栈内存设置得越大,可以支持更多的递归调用,但是可执行的线程数就会越少。</p> <p>如物理内存为500M,栈内存为1M,那么就可以执行500个线程,如果栈内存为2M，那么就只能执行250个线程。</p> <p><strong>问题3、方法内的局部变量是否是线程安全的？</strong></p> <p>1）、如果方法内的局部变量没有逃离方法的作用范围,则线程是安全的。</p> <p>2）、如果局部变量引用了对象,并逃离了方法的作用范围,则需要考虑线程安全的问题。</p> <p><strong>4、栈内存溢出</strong></p> <p>java.lang.stackOverflowError就是栈内存溢出</p> <p>导致栈内存溢出的原因：</p> <p>1）、虚拟机栈中,栈帧过多(无限递归)</p> <p>2）、每个栈帧所占用的内存过大</p> <p>栈帧过多测试,如下：</p> <pre><code>package com.wzy.test; /**  * 栈内存溢出测试  * */ public class StackTest {     public static void main(String[] args) {         method1();     }      public static void method1(){         method1();     } }</code></pre> <p>上面声明一个方法method1，递归调用method1方法。改造上面的代码,我们声明一个count计数器,在程序执行捕获异常时,看看递归调用多少次method1方法才会导致栈内存溢出</p> <pre><code>package com.wzy.test; /**  * 栈内存溢出测试  * */ public class StackTest {     private static int count;     public static void main(String[] args) {         try{             method1();         }catch(Throwable e){             e.printStackTrace();             System.out.println(count);         }      }      public static void method1(){         count++;         method1();     } }</code></pre> <p>执行结果,如下：</p> <p><img loading="lazy" decoding="async" alt="" height="492" src="http://img.555519.xyz/uploads3/20220819/c6ce31d2ddbff579ae140d7c62a131ec.jpg"></p> <p>即递归调用method1方法17380次,导致栈内存溢出。</p> <p>我们可以修改栈内存,设置VM options中参数为-Xss256k,再次测试</p> <p><img loading="lazy" decoding="async" alt="" height="470" src="http://img.555519.xyz/uploads3/20220819/5a24c47cb6c0ee1177d4113ec8da3bb4.jpg"></p> <p>再次执行</p> <p><img loading="lazy" decoding="async" alt="" height="409" src="http://img.555519.xyz/uploads3/20220819/a76855c8e4d4968e54a337e2fa382e14.jpg"></p> <p>递归调用3555次方法,才出现栈内存溢出</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-76677.htm">国内兽药厂家排名前十强（国内兽药厂家排名前十强）</a></p>
                                        <p>下一个：<a href="/news/article-77356.htm">天宫院宠物医院怎么样啊（天宫院小吃店地址）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-77355.htm" title="JVM程序计数器与虚拟机栈">JVM程序计数器与虚拟机栈</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-23-node-share-links.htm" title="2月23日 - 最高速度20.1M/S，2025年Nekobox每天更新免费节点订阅地址">2月23日 - 最高速度20.1M/S，2025年Nekobox每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-64938.htm" title="宠物粮食哪里批发（宠物粮进货平台）">宠物粮食哪里批发（宠物粮进货平台）</a></li>
                        <li class="py-2"><a href="/news/article-41283.htm" title="被猫抓伤没有出血有红印（被猫抓伤没出血有血印）">被猫抓伤没有出血有红印（被猫抓伤没出血有血印）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-17-latest-nekobox-node.htm" title="1月17日 - 最高速度20.9M/S，2025年Nekobox每天更新免费节点订阅地址">1月17日 - 最高速度20.9M/S，2025年Nekobox每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-7-nekobox-node-windows.htm" title="3月7日 - 最高速度20.8M/S，2025年Nekobox每天更新免费节点订阅地址">3月7日 - 最高速度20.8M/S，2025年Nekobox每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-41282.htm" title="Vue基础之Vue列表渲染">Vue基础之Vue列表渲染</a></li>
                        <li class="py-2"><a href="/news/article-63109.htm" title="Django获取当前页面url">Django获取当前页面url</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-15-latest-nekobox-node.htm" title="1月15日 - 最高速度19.6M/S，2025年Nekobox每天更新免费节点订阅地址">1月15日 - 最高速度19.6M/S，2025年Nekobox每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-36844.htm" title="兽医成人本科可以考证吗（成人大学兽医专业可以考兽医医师资格证吗?）">兽医成人本科可以考证吗（成人大学兽医专业可以考兽医医师资格证吗?）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">65</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- #about -->
        <footer id="footer">
    <div class="container">
        <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
            Free Nekobox官方节点站 版权所有
            <br />
            Powered by WordPress
        </div>
    </div>
</footer><!-- #footer -->
<a href="#" class="back-to-top"><i class="fa fa-chevron-up"></i></a>
<!-- JavaScript  -->
<script src="/assets/website/js/frontend/freenekobox/jquery/jquery.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/jquery/jquery-migrate.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/easing/easing.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/superfish/hoverIntent.js"></script>
<script src="/assets/website/js/frontend/freenekobox/superfish/superfish.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/wow/wow.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/owlcarousel/owl.carousel.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/magnific-popup/magnific-popup.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/sticky/sticky.js"></script>
<script src="/assets/website/js/frontend/freenekobox/main.js"></script>
<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    </main>
</body>

</html>
<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freenekobox.github.io/news/article-55043.htm" />
    <meta charset="utf-8">
    <title>ASP.NET Core使用EF为关系数据库建模_实用技巧</title>
        <meta name="description" content="目录  1.简介 2.表映射  2.1约定 2.2数据注释 2.3Fluent API  3.列映射  3.1约定 3.2数据注释 3.3Fluent API  4.数据类型  4.1约定 4.2数据" />
        <link rel="icon" href="/assets/website/img/freenekobox/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free Nekobox官方节点站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freenekobox.github.io/news/article-55043.htm" />
    <meta property="og:site_name" content="Free Nekobox官方节点站" />
    <meta property="og:title" content="ASP.NET Core使用EF为关系数据库建模_实用技巧" />
    <meta property="og:image" content="https://freenekobox.github.io/uploads/20240726/51b2d1ff76ece3db24756f47a6f797f6.webp" />
        <meta property="og:release_date" content="2025-02-12T09:05:45" />
    <meta property="og:updated_time" content="2025-02-12T09:05:45" />
        <meta property="og:description" content="目录  1.简介 2.表映射  2.1约定 2.2数据注释 2.3Fluent API  3.列映射  3.1约定 3.2数据注释 3.3Fluent API  4.数据类型  4.1约定 4.2数据" />
        
    <meta content="width=device-width, initial-scale=1.0" name="viewport">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="ASP.NET Core使用EF为关系数据库建模_实用技巧">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,700,700i|Raleway:300,400,500,700,800|Montserrat:300,400,700" rel="stylesheet">
    <!-- Bootstrap CSS File -->
    <link href="/assets/website/js/frontend/freenekobox/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <!-- Libraries CSS Files -->
    <link href="/assets/website/js/frontend/freenekobox/font-awesome/css/font-awesome.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/animate/animate.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/ionicons/css/ionicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/magnific-popup/magnific-popup.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/ionicons/css/ionicons.min.css" rel="stylesheet">
    <!-- Main Stylesheet File -->
    <link href="/assets/website/css/freenekobox/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0MMNV1S9L6"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0MMNV1S9L6');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="body" data-page="detail">
        <header id="header">
        <div class="container">
            <div id="logo" class="pull-left">
                                <a href="/" id="body" class="scrollto">Free Nekobox</a>
                                <!-- <a href="#body"><img src="/assets/website/img/freenekobox/logo.png" alt="" title="" /></a>-->
            </div>
            <nav id="nav-menu-container">
                <ul class="nav-menu">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/client.htm">客户端</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                    </ul>
            </nav><!-- #nav-menu-container -->
        </div>
    </header><!-- #header -->
    <!--==========================
    Page Banner Section
  ============================-->
    <section id="innerBanner">
        <div class="inner-content">
            <h1><span>ASP.NET Core使用EF为关系数据库建模_实用技巧</span></h1>
            <div class="nav-box">
                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
            </div>
        </div>
    </section><!-- #Page Banner -->
    <main id="main">
        <section id="about" class="wow fadeInUp">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="NekoBoxNode官网节点站" data-url="https://nekoboxnode.github.io">
                  				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">1.简介</a></li> <li><a href="#_label1" rel="nofollow">2.表映射</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_1_0" rel="nofollow">2.1约定</a></li> <li><a href="#_lab2_1_1" rel="nofollow">2.2数据注释</a></li> <li><a href="#_lab2_1_2" rel="nofollow">2.3Fluent API</a></li> </ul> <li><a href="#_label2" rel="nofollow">3.列映射</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_2_3" rel="nofollow">3.1约定</a></li> <li><a href="#_lab2_2_4" rel="nofollow">3.2数据注释</a></li> <li><a href="#_lab2_2_5" rel="nofollow">3.3Fluent API</a></li> </ul> <li><a href="#_label3" rel="nofollow">4.数据类型</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_3_6" rel="nofollow">4.1约定</a></li> <li><a href="#_lab2_3_7" rel="nofollow">4.2数据注释</a></li> <li><a href="#_lab2_3_8" rel="nofollow">4.3Fluent API</a></li> </ul> <li><a href="#_label4" rel="nofollow">5.主键</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_4_9" rel="nofollow">5.1约定</a></li> <li><a href="#_lab2_4_10" rel="nofollow">5.2数据注释</a></li> <li><a href="#_lab2_4_11" rel="nofollow">5.3Fluent API</a></li> </ul> <li><a href="#_label5" rel="nofollow">6.默认架构</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_5_12" rel="nofollow">6.1约定</a></li> <li><a href="#_lab2_5_13" rel="nofollow">6.2数据注释</a></li> <li><a href="#_lab2_5_14" rel="nofollow">6.3Fluent API</a></li> </ul> <li><a href="#_label6" rel="nofollow">7.默认值</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_6_15" rel="nofollow">7.1约定</a></li> <li><a href="#_lab2_6_16" rel="nofollow">7.2数据注释</a></li> <li><a href="#_lab2_6_17" rel="nofollow">7.3Fluent API</a></li> </ul> <li><a href="#_label7" rel="nofollow">8.索引（关系数据库）</a></li> <ul class="second_class_ul"> <li><a href="#_lab2_7_18" rel="nofollow">8.1约定</a></li> <li><a href="#_lab2_7_19" rel="nofollow">8.2数据注释</a></li> <li><a href="#_lab2_7_20" rel="nofollow">8.3Fluent API</a></li> </ul> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>1.简介</h2> <p>一般而言，本部分中的配置适用于关系数据库。安装关系数据库提供程序时，此处显示的变为可用扩展方法（原因在于共享的Microsoft.EntityFrameworkCore.Relational包）。</p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>2.表映射</h2> <p>表映射标识在数据库中哪张表应该进行内容查询和保存操作。</p> <p class="maodian"><a name="_lab2_1_0" rel="nofollow"></a></p> <h3>2.1约定</h3> <p>按照约定，每个实体将设置为映射到名称与DbSet&lt;TEntity&gt; 属性（公开派生上下文中的实体）相同的表中。如果给定DbSet&lt;TEntity&gt;实体中不包含，则使用类名称。</p> <p class="maodian"><a name="_lab2_1_1" rel="nofollow"></a></p> <h3>2.2数据注释</h3> <p>可以使用数据注释来配置类型映射表。</p> <div class="ay1code"> <pre class="brush:csharp;">[Table("blogs")]  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p>你还可以指定表所属的架构（数据库）。</p> <div class="ay1code"> <pre class="brush:csharp;">[Table("blogs", Schema = "blogging")]  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p class="maodian"><a name="_lab2_1_2" rel="nofollow"></a></p> <h3>2.3Fluent API</h3> <p>你可以使用熟知的API来配置类型映射到的表。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;Blog&gt;()              .ToTable("blogs");      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p>你还可以指定表所属的架构（数据库）。</p> <div class="ay1code"> <pre class="brush:csharp;">modelBuilder.Entity&lt;Blog&gt;().ToTable("blogs", schema: "blogging");</pre> </div> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>3.列映射</h2> <p>列映射标识在数据库中应从哪些列数据中进行查询和保存。</p> <p class="maodian"><a name="_lab2_2_3" rel="nofollow"></a></p> <h3>3.1约定</h3> <p>按照约定，每个属性将会设置为映射到与属性具有相同名称的列。</p> <p class="maodian"><a name="_lab2_2_4" rel="nofollow"></a></p> <h3>3.2数据注释</h3> <p>可以使用数据注释来配置属性映射到的那一列。</p> <div class="ay1code"> <pre class="brush:csharp;">namespace EFModeling.DataAnnotations.Relational.Column  {      class MyContext : DbContext      {          public DbSet&lt;Blog&gt; Blogs { get; set; }      }      public class Blog      {          [Column("blog_id")]          public int BlogId { get; set; }          public string Url { get; set; }      }  }</pre> </div> <p class="maodian"><a name="_lab2_2_5" rel="nofollow"></a></p> <h3>3.3Fluent API</h3> <p>您可以使用熟知的API来配置属性映射到的列。</p> <div class="ay1code"> <pre class="brush:csharp;">namespace EFModeling.FluentAPI.Relational.Column  {      class MyContext : DbContext      {          public DbSet&lt;Blog&gt; Blogs { get; set; }          protected override void OnModelCreating(ModelBuilder modelBuilder)          {              modelBuilder.Entity&lt;Blog&gt;()                  .Property(b =&gt; b.BlogId)                  .HasColumnName("blog_id");          }      }      public class Blog      {          public int BlogId { get; set; }          public string Url { get; set; }      }  }</pre> </div> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>4.数据类型</h2> <p>数据类型是指属性所映射到的列的数据库特定类型。</p> <p class="maodian"><a name="_lab2_3_6" rel="nofollow"></a></p> <h3>4.1约定</h3> <p>按照约定，数据库提供程序基于属性的.NET类型选择数据类型。它还会考虑其他元数据，如配置的最大长度、属性是否是主键的一部分等。例如，SQL Server的DateTime、nvarchar(max) 用作键的属性。</p> <p class="maodian"><a name="_lab2_3_7" rel="nofollow"></a></p> <h3>4.2数据注释</h3> <p>您可以使用数据注释为列指定精确的数据类型。例如，下面的代码将Url配置为一个非unicode字符串，其最大200长度。Rating为5至2小数位。</p> <div class="ay1code"> <pre class="brush:csharp;">public class Blog  {      public int BlogId { get; set; }      [Column(TypeName = "varchar(200)")]      public string Url { get; set; }      [Column(TypeName = "decimal(5, 2)")]      public decimal Rating { get; set; }  }</pre> </div> <p class="maodian"><a name="_lab2_3_8" rel="nofollow"></a></p> <h3>4.3Fluent API</h3> <p>你还可以使用熟知的API为列指定相同的数据类型。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;Blog&gt;(eb =&gt;          {              eb.Property(b =&gt; b.Url).HasColumnType("varchar(200)");              eb.Property(b =&gt; b.Rating).HasColumnType("decimal(5, 2)");          });      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }      public decimal Rating { get; set; }  }</pre> </div> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>5.主键</h2> <p>为每个实体类型的键引入primary key（主键）约束。</p> <p class="maodian"><a name="_lab2_4_9" rel="nofollow"></a></p> <h3>5.1约定</h3> <p>按照约定，会将数据库中的主键命名为PK_&lt;type name&gt;。</p> <p class="maodian"><a name="_lab2_4_10" rel="nofollow"></a></p> <h3>5.2数据注释</h3> <p>不能使用数据批注配置主键的关系数据库的特定方面。</p> <p class="maodian"><a name="_lab2_4_11" rel="nofollow"></a></p> <h3>5.3Fluent API</h3> <p>你可以使用API在数据库中配置primary key（主键）约束的名称。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;Blog&gt;()              .HasKey(b =&gt; b.BlogId)              .HasName("PrimaryKey_BlogId");      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p class="maodian"><a name="_label5" rel="nofollow"></a></p> <h2>6.默认架构</h2> <p>如果没有为该对象显式配置架构，则默认架构为将在其中创建对象的数据库架构。</p> <p class="maodian"><a name="_lab2_5_12" rel="nofollow"></a></p> <h3>6.1约定</h3> <p>按照约定，数据库提供程序将选择最适合的默认架构。例如，Microsoft SQL Server将使用dbo架构，而且sqlite将不使用架构（因为sqlite不支持架构）。</p> <p class="maodian"><a name="_lab2_5_13" rel="nofollow"></a></p> <h3>6.2数据注释</h3> <p>不能使用数据批注设置默认架构。</p> <p class="maodian"><a name="_lab2_5_14" rel="nofollow"></a></p> <h3>6.3Fluent API</h3> <p>可以使用API来指定默认架构。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.HasDefaultSchema("blogging");      }  }</pre> </div> <p class="maodian"><a name="_label6" rel="nofollow"></a></p> <h2>7.默认值</h2> <p>如果插入新行，但没有为该列指定值，则列的默认值为要插入的值。</p> <p class="maodian"><a name="_lab2_6_15" rel="nofollow"></a></p> <h3>7.1约定</h3> <p>按照约定，未配置默认值。</p> <p class="maodian"><a name="_lab2_6_16" rel="nofollow"></a></p> <h3>7.2数据注释</h3> <p>不能使用数据批注设置默认值。</p> <p class="maodian"><a name="_lab2_6_17" rel="nofollow"></a></p> <h3>7.3Fluent API</h3> <p>你可以使用API指定属性的默认值。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;Blog&gt;()              .Property(b =&gt; b.Rating)              .HasDefaultValue(3);      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }      public int Rating { get; set; }  }</pre> </div> <p>还可以指定用于计算默认值的SQL片段。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;Blog&gt;()              .Property(b =&gt; b.Created)              .HasDefaultValueSql("getdate()");      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }      public DateTime Created { get; set; }  }</pre> </div> <p class="maodian"><a name="_label7" rel="nofollow"></a></p> <h2>8.索引（关系数据库）</h2> <p>关系数据库中的索引映射到与实体框架核心中的索引相同的概念。</p> <p class="maodian"><a name="_lab2_7_18" rel="nofollow"></a></p> <h3>8.1约定</h3> <p>按照约定，索引命名为IX_&lt;type name&gt;_&lt;property name&gt;。对于复合索引&lt;property name&gt;，将成为以下划线分隔的属性名称列表。</p> <p class="maodian"><a name="_lab2_7_19" rel="nofollow"></a></p> <h3>8.2数据注释</h3> <p>不能使用数据批注配置索引。</p> <p class="maodian"><a name="_lab2_7_20" rel="nofollow"></a></p> <h3>8.3Fluent API</h3> <p>你可以使用熟知的API来配置索引的名称。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;Blog&gt;()              .HasIndex(b =&gt; b.Url)              .HasName("Index_Url");      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p>你还可以指定筛选器。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;Blog&gt;()              .HasIndex(b =&gt; b.Url)              .HasFilter("[Url] IS NOT NULL");      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p>使用SQL Server提供程序EF为唯一索引中包含的所有可以为null的列添加"IS NOT NULL"筛选器。若要重写此约定，可以null提供一个值。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Blog&gt; Blogs { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;Blog&gt;()              .HasIndex(b =&gt; b.Url)              .IsUnique()              .HasFilter(null);      }  }  public class Blog  {      public int BlogId { get; set; }      public string Url { get; set; }  }</pre> </div> <p>在SQL Server索引中包含列，当查询中的所有列都作为键列或非键列包含在索引中时，可以通过包含列配置索引以显著提高查询性能。</p> <div class="ay1code"> <pre class="brush:csharp;">class MyContext : DbContext  {      public DbSet&lt;Post&gt; Posts { get; set; }      protected override void OnModelCreating(ModelBuilder modelBuilder)      {          modelBuilder.Entity&lt;Post&gt;()              .HasIndex(p =&gt; p.Url)              .IncludeProperties(p =&gt; new              {                  p.Title,                  p.PublishedOn              })              .HasName("Index_Url_Include_Title_PublishedOn");      }  }  public class Post  {      public int PostId { get; set; }      public string Url { get; set; }      public string Title { get; set; }      public DateTime PublishedOn { get; set; }  }</pre> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-54499.htm">宠物店粮食一个月要多少斤（宠物店粮食一个月要多少斤正常）</a></p>
                                        <p>下一个：<a href="/news/article-55044.htm">动物打了疫苗了被抓还要***吗多少钱（动物打了疫苗了被抓还要***吗多少钱一次）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-11-16-node-share-links.htm" title="11月16日 - 最高速度20.5M/S，2024年Nekobox每天更新免费节点订阅链接">11月16日 - 最高速度20.5M/S，2024年Nekobox每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-42271.htm" title="数据库事务的四大特性和隔离级别">数据库事务的四大特性和隔离级别</a></li>
                        <li class="py-2"><a href="/news/article-25503.htm" title="瑞鹏宠物医院在线咨询免费医疗（瑞鹏宠物医院在哪些城市有）">瑞鹏宠物医院在线咨询免费医疗（瑞鹏宠物医院在哪些城市有）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-8-nekobox-node-github.htm" title="2月8日 - 最高速度18.6M/S，2025年Nekobox每天更新免费节点订阅地址">2月8日 - 最高速度18.6M/S，2025年Nekobox每天更新免费节点订阅地址</a></li>
                        <li class="py-2"><a href="/news/article-51276.htm" title="Jackson 枚举序列化/反序列化">Jackson 枚举序列化/反序列化</a></li>
                        <li class="py-2"><a href="/news/article-25046.htm" title="成都市宠物狗领养平台官网电话（成都宠物狗领养吧）">成都市宠物狗领养平台官网电话（成都宠物狗领养吧）</a></li>
                        <li class="py-2"><a href="/news/article-54499.htm" title="宠物店粮食一个月要多少斤（宠物店粮食一个月要多少斤正常）">宠物店粮食一个月要多少斤（宠物店粮食一个月要多少斤正常）</a></li>
                        <li class="py-2"><a href="/news/article-37826.htm" title="vue项目的excel的导入与导出">vue项目的excel的导入与导出</a></li>
                        <li class="py-2"><a href="/news/article-26430.htm" title="jQuery实现呼吸灯轮播图">jQuery实现呼吸灯轮播图</a></li>
                        <li class="py-2"><a href="/news/article-23647.htm" title="打疫苗能吃动物内脏吗有毒吗会致癌吗（打了疫苗可以吃动物内脏吗）">打疫苗能吃动物内脏吗有毒吗会致癌吗（打了疫苗可以吃动物内脏吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">42</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">28</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- #about -->
        <footer id="footer">
    <div class="container">
        <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
            Free Nekobox官方节点站 版权所有
            <br />
            Powered by WordPress
        </div>
    </div>
</footer><!-- #footer -->
<a href="#" class="back-to-top"><i class="fa fa-chevron-up"></i></a>
<!-- JavaScript  -->
<script src="/assets/website/js/frontend/freenekobox/jquery/jquery.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/jquery/jquery-migrate.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/easing/easing.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/superfish/hoverIntent.js"></script>
<script src="/assets/website/js/frontend/freenekobox/superfish/superfish.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/wow/wow.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/owlcarousel/owl.carousel.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/magnific-popup/magnific-popup.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/sticky/sticky.js"></script>
<script src="/assets/website/js/frontend/freenekobox/main.js"></script>
<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    </main>
</body>

</html>
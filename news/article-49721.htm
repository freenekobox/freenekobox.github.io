<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freenekobox.github.io/news/article-49721.htm" />
    <meta charset="utf-8">
    <title>前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm</title>
        <meta name="description" content="总述：在Win7环境下配置umijs框架，在框架中用worker线程方式使用SQL.js的wasm，在浏览器端实现数据的增删改查以及数据库导出导入。 一、安装node.js 1、Win7系统只支持no" />
        <link rel="icon" href="/assets/website/img/freenekobox/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free Nekobox官方节点站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freenekobox.github.io/news/article-49721.htm" />
    <meta property="og:site_name" content="Free Nekobox官方节点站" />
    <meta property="og:title" content="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm" />
    <meta property="og:image" content="https://freenekobox.github.io/uploads/20240726/084747a91b09a06849e761f3a4a71658.webp" />
        <meta property="og:release_date" content="2025-02-02T09:25:20" />
    <meta property="og:updated_time" content="2025-02-02T09:25:20" />
        <meta property="og:description" content="总述：在Win7环境下配置umijs框架，在框架中用worker线程方式使用SQL.js的wasm，在浏览器端实现数据的增删改查以及数据库导出导入。 一、安装node.js 1、Win7系统只支持no" />
        
    <meta content="width=device-width, initial-scale=1.0" name="viewport">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,700,700i|Raleway:300,400,500,700,800|Montserrat:300,400,700" rel="stylesheet">
    <!-- Bootstrap CSS File -->
    <link href="/assets/website/js/frontend/freenekobox/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <!-- Libraries CSS Files -->
    <link href="/assets/website/js/frontend/freenekobox/font-awesome/css/font-awesome.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/animate/animate.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/ionicons/css/ionicons.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/magnific-popup/magnific-popup.css" rel="stylesheet">
    <link href="/assets/website/js/frontend/freenekobox/ionicons/css/ionicons.min.css" rel="stylesheet">
    <!-- Main Stylesheet File -->
    <link href="/assets/website/css/freenekobox/style.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-0MMNV1S9L6"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-0MMNV1S9L6');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="body" data-page="detail">
        <header id="header">
        <div class="container">
            <div id="logo" class="pull-left">
                                <a href="/" id="body" class="scrollto">Free Nekobox</a>
                                <!-- <a href="#body"><img src="/assets/website/img/freenekobox/logo.png" alt="" title="" /></a>-->
            </div>
            <nav id="nav-menu-container">
                <ul class="nav-menu">
                                        <li><a href="/">首页</a></li>
                                        <li><a href="/free-nodes/">免费节点</a></li>
                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                        <li><a href="/news/">新闻资讯</a></li>
                                        <li><a href="#">关于</a></li>
                    <li><a href="#">联系</a></li>
                </ul>
            </nav><!-- #nav-menu-container -->
        </div>
    </header><!-- #header -->
    <!--==========================
    Page Banner Section
  ============================-->
    <section id="innerBanner">
        <div class="inner-content">
            <h1><span>前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm</span></h1>
            <div class="nav-box">
                <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
            </div>
        </div>
    </section><!-- #Page Banner -->
    <main id="main">
        <section id="about" class="wow fadeInUp">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="NekoBoxNode官网节点站" data-url="https://nekoboxnode.github.io">
                  				  				  				<p>总述：在Win7环境下配置umijs框架，在框架中用worker线程方式使用SQL.js的wasm，在浏览器端实现数据的增删改查以及数据库导出导入。</p> <p>一、安装node.js</p> <p>1、Win7系统只支持node.js v13.14.0或更早，所以从https://nodejs.org/download/release/v13.14.0/node-v13.14.0-x64.msi 下载旧版安装包</p> <p>2、安装时勾选“Automatically install the necessary tools......”</p> <p>3、安装程序会自动进行环境变量配置，如需手动配置：</p> <p>a、新建“NODE_PATH”，值为nodejs的安装目录</p> <p>b、修改变量Path的值，值的后面添加“;%NODE_PATH%”</p> <p>4、打开控制台执行node -v，显示node版本说明安装成功。</p> <p>二、配置三种包管理工具</p> <p>1、执行npm -v查看npm版本，执行npm i -g npm可更新npm自身，更新为新版后，新版npm会在Win7环境下报错，但并不影响使用。</p> <p>2、设置淘宝仓库：npm config set registry https://registry.npm.taobao.org，查看仓库设置：npm config get registry</p> <p>3、执行npm i -g cnpm安装cnpm，安装完毕后执行cnpm -v显示cnpm版本说明安装成功</p> <p>4、执行cnpm i -g yarn安装yarn，安装完毕后执行yarn --version显示yarn版本说明安装成功</p> <p>5、为yarn配置淘宝源：</p> <p>yarn&nbsp;config&nbsp;set&nbsp;registry&nbsp;https://registry.npm.taobao.org -g</p> <p>yarn&nbsp;config&nbsp;set&nbsp;sass_binary_site&nbsp;http://cdn.npm.taobao.org/dist/node-sass -g</p> <p>三、安装umijs</p> <p>1、建立一个工程目录，比如myapp</p> <p>2、在该目录下执行<span class="token function">yarn<span class="token plain"> create @umijs/umi-app或npx @umijs/create-umi-app创建项目，目录下生成以下文件：</span></span></p> <p><span class="token function"><span class="token plain"><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/9eb9756db113d3bc45a2e747ce562fc7.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></span></span></p> <p>3、执行yarn安装依赖，安装完成后目录下出现node_modules文件夹，含有所有依赖</p> <p>4、执行<span class="token function">yarn<span class="token plain"> start启动项目，如下显示则启动成功：</span></span></p> <div class="token-line"><span class="token plain">Starting the development server<span class="token punctuation">..<span class="token plain">.</span></span></span></div> <div class="token-line"></div> <div class="token-line"><span class="token plain">✔ Webpack</span></div> <div class="token-line"><span class="token plain"> Compiled successfully<span class="token keyword">in<span class="token plain"><span class="token number">17<span class="token plain">.84s</span></span></span></span></span></div> <div class="token-line"></div> <div class="token-line"><span class="token plain"> DONE Compiled successfully<span class="token keyword">in<span class="token plain"> 17842ms<span class="token number">8<span class="token plain">:06:31 PM</span></span></span></span></span></div> <div class="token-line"></div> <div class="token-line"></div> <div class="token-line"><span class="token plain"> App running at:</span></div> <div class="token-line"><span class="token plain"> - Local: http://localhost:8000<span class="token punctuation">(<span class="token plain">copied to clipboard<span class="token punctuation">)</span></span></span></span></div> <div class="token-line"><span class="token plain"> - Network: http://192.168.12.34:8000</span></div> <div class="token-line"><span class="token plain">在浏览器里打开http://localhost:8000则显示索引页面：</span></div> <div class="token-line"><span class="token plain"><span class="token plain"><span class="token plain"><img decoding="async" src="https://img2022.cnblogs.com/blog/657116/202204/657116-20220405103519989-1500700677.png" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></span></span></span></p> <p>&nbsp;5、执行cnpm i -g umi全局安装umi则可以直接使用umi dev命令启动项目（umi build打包），否则需要使用npx umi dev启动</p> <p>6、执行yarn add antd或cnpm i antd安装ant design组件</p> <p>四、命令行方式使用SQLite数据库</p> <p>1、在SQLite官方网站https://www.sqlite.org/download.html下载Window安装包，需要下载<strong>sqlite-tools</strong>&nbsp;和<strong>sqlite-dll</strong>&nbsp;两个压缩文件。</p> <p>2、建立一个sqlite3文件夹，将压缩文件解压在这里，解压后文件夹内容如下：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/2731e8107b8a157f6bcd6f166271fd77.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>&nbsp;3、将这个文件夹添加到环境变量的Path属性中，请注意不要在环境变量中混用Path、PATH、path，否则会相互覆盖。</p> <p>4、在控制台执行sqlite3进入sqlite3的命令行窗口：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/df24fbc9a071cfdca5e4cd24f2e7ad2f.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>&nbsp;5、执行.open test.mydb打开一个叫做test.mydb的数据库，如果不存在则将在该目录下建立此数据库，此数据库文件名即为test.mydb（可见SQLite并不要求文件后缀），大小为0字节。</p> <p>6、建表：</p> <p>执行create table test(id char(50),age int,name char(50));建立test表，注意如果不输入分号按回车则sqlite将理解为多行语句而非执行，直到出现分号后按回车方才执行语句。</p> <p>7、建表后test.mydb文件发生变化：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b1fe5b9315223ff4e9d27e4cd045ab7e.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>&nbsp;可见这是一个二进制文件</p> <p>8、插入一条数据</p> <p>insert into test values('test',1,'test1');</p> <p>9、查询数据</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/51dfac3eab7fb05566dc0491c5b98f0a.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>直接把数据行列出，如下执行则可显示表头：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/807fcb848d5654add5a818ca1720670b.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>&nbsp;五、建立测试页面</p> <p>1、执行yarn add sql.js安装sql.js库，sql.js是一个致力于在前端执行sql指令的github项目，最初为纯javaScript项目，从某个版本开始改为用SQLite的wasm编译版本作为底层，目前前端界普遍认为wasm比js效率更高。</p> <p>2、在pages下建立test /01testsqllite.js测试页面</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/381edb35695a37095a6cdbfecbde4fb4.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>&nbsp;在.umirc.ts配置文件中配置这个测试页面的路由：</p> <pre>routes: [<br/>  { path: '/', component: '@/pages/index' },<br/>  { path: '/test1', component: '@/pages/test/01testsqllite' },<br/>],</pre> <p>3、遗憾的是umi的底层Webpack并不默认支持wasm，直接在页面中import SQL.js库将导致运行错误。这时有两种解决思路，一是对Webpack进行修改使之支持WebAssembly，比如https://www.cnblogs.com/detectiveHLH/p/9881626.html；二是跳过Webpack用其他方法引入SQL.js库。这里选择第二种思路。</p> <p>4、进入myapp\node_modules\sql.js\dist目录：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/20a88be8338536f3277467de05956120.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>&nbsp;复制sql-wasm.js、sql-wasm.wasm、worker.sql-wasm.js三个文件，其中sql-wasm.js为主线程方式的wasm接口，worker.sql-wasm.js为worker线程方式的wasm接口，sql-wasm.wasm为通用的wasm文件。</p> <p>在项目根目录下建立public目录，将上述三个文件粘贴到这里，这样这三个文件将不经Webpack处理原样出现在编译后的工程中。</p> <p>六、操作数据库</p> <p>1、worker模式初始化数据库：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> useEffect(()=&gt;<span style="color: rgba(0, 128, 128, 1)"> 2</span><span style="color: rgba(0, 0, 0, 1)">    {</span><span style="color: rgba(0, 128, 128, 1)"> 3</span><span style="color: rgba(0, 0, 255, 1)">if</span>(!inited)<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">开发模式下这个useEffect将执行两次</span><span style="color: rgba(0, 128, 128, 1)"> 4</span><span style="color: rgba(0, 0, 0, 1)">        {</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>             setInited(<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>             window.myObjUnit=<span style="color: rgba(0, 0, 0, 1)">{};</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>             window.mySQLWorker2 =<span style="color: rgba(0, 0, 255, 1)">new</span> Worker("worker.sql-wasm.js");<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">这个从dist中加载，在worker线程中运行</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>             const worker2 =<span style="color: rgba(0, 0, 0, 1)"> window.mySQLWorker2;</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>             worker2.onerror = e =&gt; console.log("Worker2 error: "<span style="color: rgba(0, 0, 0, 1)">, e);</span><span style="color: rgba(0, 128, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">            worker2.postMessage({//通知worker线程启动数据库</span><span style="color: rgba(0, 128, 128, 1)">11</span>                 id:1<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">12</span>                 action:"open"<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">13</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">buffer:buf, /*Optional. An ArrayBuffer representing an SQLite Database file*/可用来加载已有的数据库，否则将建立新的数据库</span><span style="color: rgba(0, 128, 128, 1)">14</span><span style="color: rgba(0, 0, 0, 1)">            });</span><span style="color: rgba(0, 128, 128, 1)">15</span><span style="color: rgba(0, 128, 128, 1)">16</span>             worker2.onmessage = () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 128, 1)">17</span>                 console.log("Database opened"<span style="color: rgba(0, 0, 0, 1)">);//启动成功</span><span style="color: rgba(0, 128, 128, 1)">18</span>                 worker2.onmessage = event =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 128, 1)">19</span>                     console.log(event.data);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> The result of the query</span><span style="color: rgba(0, 128, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)">                };</span><span style="color: rgba(0, 128, 128, 1)">21</span><span style="color: rgba(0, 128, 128, 1)">22</span><span style="color: rgba(0, 0, 0, 1)">                worker2.postMessage({</span><span style="color: rgba(0, 128, 128, 1)">23</span>                     id: 2<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">24</span>                     action: "exec"<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">25</span>                     sql: "CREATE TABLE test (id char, age int, name char);"<span style="color: rgba(0, 0, 0, 1)">,//建表</span><span style="color: rgba(0, 128, 128, 1)">26</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">params: { "$id": 1 }</span><span style="color: rgba(0, 128, 128, 1)">27</span><span style="color: rgba(0, 0, 0, 1)">                });</span><span style="color: rgba(0, 128, 128, 1)">28</span><span style="color: rgba(0, 0, 0, 1)">            };</span><span style="color: rgba(0, 128, 128, 1)">29</span><span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)">30</span><span style="color: rgba(0, 128, 128, 1)">31</span>     },[]);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">初始化数据库</span></pre> </div> <p>执行后的Chrome控制台输出：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/34714a5d9843acd19498cfbdd3a0e4eb.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>2、worker模式插入和查询数据</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 128, 1)"> 1</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> addUnit(){</span><span style="color: rgba(0, 128, 128, 1)"> 2</span><span style="color: rgba(0, 0, 255, 1)">if</span><span style="color: rgba(0, 0, 0, 1)">(window.myObjUnit)</span><span style="color: rgba(0, 128, 128, 1)"> 3</span><span style="color: rgba(0, 0, 0, 1)">        {</span><span style="color: rgba(0, 128, 128, 1)"> 4</span><span style="color: rgba(0, 0, 255, 1)">var</span> unitid="unit_"+<span style="color: rgba(0, 0, 0, 1)">countUnit;</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>             window.myObjUnit[unitid]=<span style="color: rgba(0, 0, 0, 1)">{id:unitid};</span><span style="color: rgba(0, 128, 128, 1)"> 6</span>             setCountUnit(countUnit+1<span style="color: rgba(0, 0, 0, 1)">);//命名序列加一</span><span style="color: rgba(0, 128, 128, 1)"> 7</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>             const worker =<span style="color: rgba(0, 0, 0, 1)"> window.mySQLWorker2;</span><span style="color: rgba(0, 128, 128, 1)"> 9</span><span style="color: rgba(0, 0, 0, 1)">            worker.postMessage({//顺序发送指令</span><span style="color: rgba(0, 128, 128, 1)">10</span>                 id: 2<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">11</span>                 action: "exec"<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">12</span>                 sql: "INSERT INTO test VALUES ($id,$age,$name)"<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">13</span>                 params: { "$id": unitid ,"$age": 1,"$name"<span style="color: rgba(0, 0, 0, 1)">: unitid}</span><span style="color: rgba(0, 128, 128, 1)">14</span><span style="color: rgba(0, 0, 0, 1)">            });</span><span style="color: rgba(0, 128, 128, 1)">15</span><span style="color: rgba(0, 128, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">            worker.postMessage({</span><span style="color: rgba(0, 128, 128, 1)">17</span>                 id: 2<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">18</span>                 action: "exec"<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">19</span>                 sql: "SELECT id,age,name FROM test"<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">20</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">params: { "$id": 1 }</span><span style="color: rgba(0, 128, 128, 1)">21</span><span style="color: rgba(0, 0, 0, 1)">            });</span><span style="color: rgba(0, 128, 128, 1)">22</span><span style="color: rgba(0, 128, 128, 1)">23</span><span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)">24</span>     }<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">添加一条记录</span></pre> </div> <p>点击两次“添加单位”后，Chrome控制台的输出：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/165c450309e9fcf88b71244c762232f3.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>&nbsp;可以看到插入的两条数据以及select语句返回的数据结构。</p> <p>3、worker模式导出数据库</p> <p>改造一下页面：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6678bcd2192b2831bee6150474a9ba5d.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>&nbsp;如图向worker线程发送export命令</p> <p>再改造一下主线程的onmessage响应：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> worker2.onmessage = event =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 128, 1)"> 2</span><span style="color: rgba(0, 0, 255, 1)">if</span>(event.data.id==2<span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 128, 1)"> 3</span><span style="color: rgba(0, 0, 0, 1)">                    {</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>                         console.log(event.data);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> The result of the query</span><span style="color: rgba(0, 128, 128, 1)"> 5</span><span style="color: rgba(0, 0, 0, 1)">                    }</span><span style="color: rgba(0, 128, 128, 1)"> 6</span><span style="color: rgba(0, 0, 255, 1)">else</span><span style="color: rgba(0, 0, 255, 1)">if</span>(event.data.id=="export2"<span style="color: rgba(0, 0, 0, 1)">)</span><span style="color: rgba(0, 128, 128, 1)"> 7</span><span style="color: rgba(0, 0, 0, 1)">                    {//如果这个信息的id是export2</span><span style="color: rgba(0, 128, 128, 1)"> 8</span><span style="color: rgba(0, 0, 255, 1)">var</span> blob=<span style="color: rgba(0, 0, 255, 1)">new</span> Blob([event.data.buffer],{type:"application/geopackage+sqlite3"<span style="color: rgba(0, 0, 0, 1)">});</span><span style="color: rgba(0, 128, 128, 1)"> 9</span><span style="color: rgba(0, 0, 255, 1)">var</span> link=document.createElement("a"<span style="color: rgba(0, 0, 0, 1)">);//则用超链接方式下载这个数据库文件</span><span style="color: rgba(0, 128, 128, 1)">10</span>                         link.href=<span style="color: rgba(0, 0, 0, 1)">window.URL.createObjectURL(blob);</span><span style="color: rgba(0, 128, 128, 1)">11</span>                         link.download="test.db"<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">12</span><span style="color: rgba(0, 0, 0, 1)">                        link.click();</span><span style="color: rgba(0, 128, 128, 1)">13</span><span style="color: rgba(0, 0, 0, 1)">                        window.URL.revokeObjectURL(blob);</span><span style="color: rgba(0, 128, 128, 1)">14</span><span style="color: rgba(0, 0, 0, 1)">                    }</span><span style="color: rgba(0, 128, 128, 1)">15</span>                 };</pre> </div> <p>这时点击“worker线程导出数据”按钮即可导出test.db数据库文件</p> <p>使用sqlite3命令行打开这个文件，可以看到react程序中建立的数据表：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/5d2e15827406a4c0d40208728c73fd4c.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>&nbsp;同时观察Chrome的Performance页面，可以看到确实是由worker线程进行了export操作：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/ad762f93f2392781006a7bc719681671.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>七、主线程模式操作</p> <p>1、要在主线程中使用SQL.js，首先要把SQL.js库添加到主线程的HTML中，这里使用umi的headScripts配置项实现：</p> <p>修改.umirc.ts配置文件：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 128, 1)"> 1</span> import { defineConfig } from 'umi'<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)"> 2</span><span style="color: rgba(0, 128, 128, 1)"> 3</span> export<span style="color: rgba(0, 0, 255, 1)">default</span><span style="color: rgba(0, 0, 0, 1)"> defineConfig({</span><span style="color: rgba(0, 128, 128, 1)"> 4</span><span style="color: rgba(0, 0, 0, 1)">  nodeModulesTransform: {</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>     type: 'none'<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)"> 6</span><span style="color: rgba(0, 0, 0, 1)">  },</span><span style="color: rgba(0, 128, 128, 1)"> 7</span><span style="color: rgba(0, 0, 0, 1)">  routes: [</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>     { path: '/', component: '@/pages/index'<span style="color: rgba(0, 0, 0, 1)"> },</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>     { path: '/test1', component: '@/pages/test/01testsqllite'<span style="color: rgba(0, 0, 0, 1)"> },</span><span style="color: rgba(0, 128, 128, 1)">10</span><span style="color: rgba(0, 0, 0, 1)">  ],</span><span style="color: rgba(0, 128, 128, 1)">11</span><span style="color: rgba(0, 0, 0, 1)">  fastRefresh: {},</span><span style="color: rgba(0, 128, 128, 1)">12</span><span style="color: rgba(0, 0, 0, 1)">    headScripts:[</span><span style="color: rgba(0, 128, 128, 1)">13</span>         {src:"worker.sql-wasm.js"}<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">这个是加到umi的HTML中的，在主线程中运行</span><span style="color: rgba(0, 128, 128, 1)">14</span><span style="color: rgba(0, 0, 0, 1)">    ]</span><span style="color: rgba(0, 128, 128, 1)">15</span> });</pre> </div> <p>headScripts的配置方法见官方文档：https://umijs.org/zh-CN/config#headscripts</p> <p>2、exportDB方法中包含主线程的操作方法：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 128, 1)"> 1</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> exportDB(){</span><span style="color: rgba(0, 128, 128, 1)"> 2</span><span style="color: rgba(0, 0, 255, 1)">var</span> config =<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>             locateFile: file =&gt; "sql-wasm.wasm"<span style="color: rgba(0, 128, 128, 1)"> 4</span><span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>         initSqlJs(config).then(<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">(SQL){//虽然这里调用的是worker.sql-wasm.js中的initSqlJs方法，但仍然运行在主线程中！</span><span style="color: rgba(0, 128, 128, 1)"> 6</span><span style="color: rgba(0, 0, 255, 1)">var</span> db =<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SQL.Database();//建库</span><span style="color: rgba(0, 128, 128, 1)"> 7</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Run a query without reading the results</span><span style="color: rgba(0, 128, 128, 1)"> 8</span>             db.run("CREATE TABLE test (col1, col2);"<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 128, 1)"> 9</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Insert two rows: (1,111) and (2,222)</span><span style="color: rgba(0, 128, 128, 1)">10</span>             db.run("INSERT INTO test VALUES (?,?), (?,?)", [1,111,2,222<span style="color: rgba(0, 0, 0, 1)">]);</span><span style="color: rgba(0, 128, 128, 1)">11</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Prepare a statement</span><span style="color: rgba(0, 128, 128, 1)">12</span><span style="color: rgba(0, 0, 255, 1)">var</span> stmt = db.prepare("SELECT * FROM test WHERE col1 BETWEEN $start AND $end"<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 128, 1)">13</span>             stmt.getAsObject({$start:1, $end:1});<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> {col1:1, col2:111}</span><span style="color: rgba(0, 128, 128, 1)">14</span><span style="color: rgba(0, 128, 128, 1)">15</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Bind new values</span><span style="color: rgba(0, 128, 128, 1)">16</span>             stmt.bind({$start:1, $end:2<span style="color: rgba(0, 0, 0, 1)">});</span><span style="color: rgba(0, 128, 128, 1)">17</span><span style="color: rgba(0, 0, 255, 1)">while</span>(stmt.step()) {<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 128, 1)">18</span><span style="color: rgba(0, 0, 255, 1)">var</span> row =<span style="color: rgba(0, 0, 0, 1)"> stmt.getAsObject();</span><span style="color: rgba(0, 128, 128, 1)">19</span>                 console.log('Here is a row: ' +<span style="color: rgba(0, 0, 0, 1)"> JSON.stringify(row));</span><span style="color: rgba(0, 128, 128, 1)">20</span><span style="color: rgba(0, 0, 0, 1)">            }</span><span style="color: rgba(0, 128, 128, 1)">21</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">var fs = require("fs");</span><span style="color: rgba(0, 128, 128, 1)">22</span><span style="color: rgba(0, 0, 255, 1)">var</span> data = db.export();<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">这个data与worker2.onmessage返回的event.data是一样的！</span><span style="color: rgba(0, 128, 128, 1)">23</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">var buffer = new Buffer(data);</span><span style="color: rgba(0, 128, 128, 1)">24</span><span style="color: rgba(0, 0, 255, 1)">var</span> blob=<span style="color: rgba(0, 0, 255, 1)">new</span> Blob([data.buffer],{type:"application/geopackage+sqlite3"<span style="color: rgba(0, 0, 0, 1)">});</span><span style="color: rgba(0, 128, 128, 1)">25</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">fs.writeFileSync("filename.sqlite", buffer);</span><span style="color: rgba(0, 128, 128, 1)">26</span><span style="color: rgba(0, 0, 255, 1)">var</span> link=document.createElement("a"<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 128, 1)">27</span>             link.href=<span style="color: rgba(0, 0, 0, 1)">window.URL.createObjectURL(blob);</span><span style="color: rgba(0, 128, 128, 1)">28</span>             link.download="test.db"<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)">29</span><span style="color: rgba(0, 0, 0, 1)">            link.click();</span><span style="color: rgba(0, 128, 128, 1)">30</span><span style="color: rgba(0, 0, 0, 1)">            window.URL.revokeObjectURL(blob);</span><span style="color: rgba(0, 128, 128, 1)">31</span><span style="color: rgba(0, 128, 128, 1)">32</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">var w=new File</span><span style="color: rgba(0, 128, 128, 1)">33</span><span style="color: rgba(0, 128, 128, 1)">34</span>         });</pre> </div> <p>观察Performance可知计算都发生在主线程中（图略）</p> <p>八、导入已有的数据库文件</p> <p>1、通过input方式读取本地文件：</p> <p>a、选择文件的input：</p> <pre>&lt;input type={"file"} onChange={importFile}&gt;&lt;/input&gt;</pre> <p>b、响应代码：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 128, 1)"> 1</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> importFile(e){</span><span style="color: rgba(0, 128, 128, 1)"> 2</span><span style="color: rgba(0, 0, 255, 1)">var</span> f = e.currentTarget.files[0<span style="color: rgba(0, 0, 0, 1)">];</span><span style="color: rgba(0, 128, 128, 1)"> 3</span><span style="color: rgba(0, 0, 255, 1)">var</span> r =<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> FileReader();</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>         r.onload =<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">() {</span><span style="color: rgba(0, 128, 128, 1)"> 5</span><span style="color: rgba(0, 0, 255, 1)">var</span> Uints =<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Uint8Array(r.result);</span><span style="color: rgba(0, 128, 128, 1)"> 6</span><span style="color: rgba(0, 0, 0, 1)">            testImportDB(Uints)</span><span style="color: rgba(0, 128, 128, 1)"> 7</span><span style="color: rgba(0, 128, 128, 1)"> 8</span><span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)"> 9</span><span style="color: rgba(0, 0, 0, 1)">        r.readAsArrayBuffer(f);</span><span style="color: rgba(0, 128, 128, 1)">10</span>     }</pre> </div> <p>2、通过ajax方式读取远程文件：</p> <p>a、触发读取的按钮：</p> <pre>&lt;Button onClick={importFile2}&gt;读取远程文件&lt;/Button&gt;</pre> <p>b、响应代码：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 128, 1)"> 1</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> importFile2(){</span><span style="color: rgba(0, 128, 128, 1)"> 2</span><span style="color: rgba(0, 0, 255, 1)">var</span> xhr =<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> XMLHttpRequest();</span><span style="color: rgba(0, 128, 128, 1)"> 3</span>         xhr.open('GET', 'test.mydb',<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 128, 1)"> 4</span>         xhr.responseType = 'arraybuffer'<span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>         xhr.onload = e =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 128, 1)"> 6</span><span style="color: rgba(0, 0, 255, 1)">var</span> Uints =<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Uint8Array(xhr.response);</span><span style="color: rgba(0, 128, 128, 1)"> 7</span><span style="color: rgba(0, 0, 0, 1)">            testImportDB(Uints)</span><span style="color: rgba(0, 128, 128, 1)"> 8</span><span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)"> 9</span><span style="color: rgba(0, 0, 0, 1)">        xhr.send();</span><span style="color: rgba(0, 128, 128, 1)">10</span>     }</pre> </div> <p>3、编写主线程方式和worker线程方式导入数据的方法：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 128, 1)"> 1</span><span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)"> testImportDB(Uints){</span><span style="color: rgba(0, 128, 128, 1)"> 2</span><span style="color: rgba(0, 128, 128, 1)"> 3</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">测试主线程方式</span><span style="color: rgba(0, 128, 128, 1)"> 4</span><span style="color: rgba(0, 0, 255, 1)">var</span> config =<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 128, 1)"> 5</span>             locateFile: file =&gt; "sql-wasm.wasm"<span style="color: rgba(0, 128, 128, 1)"> 6</span><span style="color: rgba(0, 0, 0, 1)">        }</span><span style="color: rgba(0, 128, 128, 1)"> 7</span>         initSqlJs(config).then(<span style="color: rgba(0, 0, 255, 1)">function</span><span style="color: rgba(0, 0, 0, 1)">(SQL){</span><span style="color: rgba(0, 128, 128, 1)"> 8</span><span style="color: rgba(0, 0, 255, 1)">var</span> db =<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> SQL.Database(Uints);</span><span style="color: rgba(0, 128, 128, 1)"> 9</span>             db.run("INSERT INTO test VALUES (?,?,?)", ["unitid",1,"unitid"<span style="color: rgba(0, 0, 0, 1)">]);</span><span style="color: rgba(0, 128, 128, 1)">10</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> Prepare a statement</span><span style="color: rgba(0, 128, 128, 1)">11</span><span style="color: rgba(0, 0, 255, 1)">var</span> stmt = db.prepare("SELECT * FROM test "<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 128, 1)">12</span><span style="color: rgba(0, 0, 255, 1)">while</span>(stmt.step()) {<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 128, 1)">13</span><span style="color: rgba(0, 0, 255, 1)">var</span> row =<span style="color: rgba(0, 0, 0, 1)"> stmt.getAsObject();</span><span style="color: rgba(0, 128, 128, 1)">14</span>                 console.log('Here is a row: ' +<span style="color: rgba(0, 0, 0, 1)"> JSON.stringify(row));</span><span style="color: rgba(0, 128, 128, 1)">15</span><span style="color: rgba(0, 0, 0, 1)">            }</span><span style="color: rgba(0, 128, 128, 1)">16</span><span style="color: rgba(0, 0, 0, 1)">        });</span><span style="color: rgba(0, 128, 128, 1)">17</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">测试worker线程方式</span><span style="color: rgba(0, 128, 128, 1)">18</span>         const worker3 =<span style="color: rgba(0, 0, 255, 1)">new</span> Worker("worker.sql-wasm.js"<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 128, 1)">19</span><span style="color: rgba(0, 0, 0, 1)">        worker3.postMessage({</span><span style="color: rgba(0, 128, 128, 1)">20</span>             id:1<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">21</span>             action:"open"<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">22</span><span style="color: rgba(0, 0, 0, 1)">            buffer:Uints,</span><span style="color: rgba(0, 128, 128, 1)">23</span><span style="color: rgba(0, 0, 0, 1)">        });</span><span style="color: rgba(0, 128, 128, 1)">24</span>         worker3.onmessage = () =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 128, 1)">25</span>             console.log("Database opened"<span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 128, 128, 1)">26</span>             worker3.onmessage = event =&gt;<span style="color: rgba(0, 0, 0, 1)"> {</span><span style="color: rgba(0, 128, 128, 1)">27</span>                 console.log(event.data);<span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> The result of the query</span><span style="color: rgba(0, 128, 128, 1)">28</span><span style="color: rgba(0, 0, 0, 1)">            };</span><span style="color: rgba(0, 128, 128, 1)">29</span><span style="color: rgba(0, 128, 128, 1)">30</span><span style="color: rgba(0, 0, 0, 1)">            worker3.postMessage({</span><span style="color: rgba(0, 128, 128, 1)">31</span>                 id: 2<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">32</span>                 action: "exec"<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">33</span>                 sql: "INSERT INTO test VALUES ($id,$age,$name)"<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">34</span>                 params: { "$id": "unitid" ,"$age": 1,"$name": "unitid"<span style="color: rgba(0, 0, 0, 1)">}</span><span style="color: rgba(0, 128, 128, 1)">35</span><span style="color: rgba(0, 0, 0, 1)">            });</span><span style="color: rgba(0, 128, 128, 1)">36</span><span style="color: rgba(0, 128, 128, 1)">37</span><span style="color: rgba(0, 0, 0, 1)">            worker3.postMessage({</span><span style="color: rgba(0, 128, 128, 1)">38</span>                 id: 2<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">39</span>                 action: "exec"<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">40</span>                 sql: "SELECT id,age,name FROM test"<span style="color: rgba(0, 0, 0, 1)">,</span><span style="color: rgba(0, 128, 128, 1)">41</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">params: { "$id": 1 }</span><span style="color: rgba(0, 128, 128, 1)">42</span><span style="color: rgba(0, 0, 0, 1)">            });</span><span style="color: rgba(0, 128, 128, 1)">43</span><span style="color: rgba(0, 0, 0, 1)">        };</span><span style="color: rgba(0, 128, 128, 1)">44</span>     }</pre> </div> <p>两种方式运行后（导入的文件都是最开始生成的test.mydb），Chrome控制台均显示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/4343be44a82ef40c17f663c0ccdd840a.jpg" alt="前端框架小实验-在umi框架中以worker线程方式使用SQL.js的wasm"></p> <p>&nbsp;说明数据文件导入成功。</p> <p>总结：以上实现了umi框架下的前端SQL基本操作，其中SQL.js操作部分参考了https://www.5axxw.com/wiki/content/50kxgo。</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-49209.htm">动物疫苗检测中心电话 动物疫苗检测中心电话号码</a></p>
                                        <p>下一个：<a href="/news/article-49722.htm">动物疫苗的保管与使用方法视频（动物疫苗的保管与使用方法视频讲解）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-20446.htm" title="北京爱康宠物医院官网（爱康宠物诊所怎么样）">北京爱康宠物医院官网（爱康宠物诊所怎么样）</a></li>
                        <li class="py-2"><a href="/news/article-42770.htm" title="上海农业大学动物医院官网（上海农业大学动物医院官网招聘）">上海农业大学动物医院官网（上海农业大学动物医院官网招聘）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-17-nekobox-node.htm" title="12月17日 - 最高速度22.3M/S，2024年Nekobox每天更新免费节点订阅链接">12月17日 - 最高速度22.3M/S，2024年Nekobox每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-21357.htm" title="宠物粮品牌名称及图片大全集（宠物粮品牌起名字）">宠物粮品牌名称及图片大全集（宠物粮品牌起名字）</a></li>
                        <li class="py-2"><a href="/news/article-27833.htm" title="宠物粮生产设备哪家好 宠物粮生产设备哪家好用">宠物粮生产设备哪家好 宠物粮生产设备哪家好用</a></li>
                        <li class="py-2"><a href="/news/article-46240.htm" title="猫回收app（猫回收电话）">猫回收app（猫回收电话）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-11-free-node-subscribe.htm" title="12月11日 - 最高速度21.7M/S，2024年Nekobox每天更新免费节点订阅链接">12月11日 - 最高速度21.7M/S，2024年Nekobox每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-10-nekobox-node-windows.htm" title="11月10日 - 最高速度21.5M/S，2024年Nekobox每天更新免费节点订阅链接">11月10日 - 最高速度21.5M/S，2024年Nekobox每天更新免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-31601.htm" title="vue实现页面刷新动画_vue.js_">vue实现页面刷新动画_vue.js_</a></li>
                        <li class="py-2"><a href="/news/article-40795.htm" title="宠物粮食加工厂设备哪的好一点呢视频（小型宠物粮加工厂需要什么手续）">宠物粮食加工厂设备哪的好一点呢视频（小型宠物粮加工厂需要什么手续）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">9</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">28</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section><!-- #about -->
        <footer id="footer">
    <div class="container">
        <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
            Free Nekobox官方节点站 版权所有
            <br />
            Powered by WordPress
        </div>
    </div>
</footer><!-- #footer -->
<a href="#" class="back-to-top"><i class="fa fa-chevron-up"></i></a>
<!-- JavaScript  -->
<script src="/assets/website/js/frontend/freenekobox/jquery/jquery.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/jquery/jquery-migrate.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/easing/easing.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/superfish/hoverIntent.js"></script>
<script src="/assets/website/js/frontend/freenekobox/superfish/superfish.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/wow/wow.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/owlcarousel/owl.carousel.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/magnific-popup/magnific-popup.min.js"></script>
<script src="/assets/website/js/frontend/freenekobox/sticky/sticky.js"></script>
<script src="/assets/website/js/frontend/freenekobox/main.js"></script>
<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    </main>
</body>

</html>